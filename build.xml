<project xmlns:ivy="antlib:org.apache.ivy.ant"
         name="SigmaNLP" default="all" basedir=".">
    <description>
        This build file is meant to be invoked only from the command line. It's
        purpose is for building/testing in a CI/CD environment
    </description>

    <!--
    ===
    IVY
    ===
    -->

    <property name="ivy.install.version" value="2.5.3"/>
    <property name="ivy.home" value="${basedir}/.ivy"/>
    <property name="ivy.jar.dir" value="${ivy.home}/lib"/>
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar"/>

    <target name="check.for.ivy.jar">
        <available file="${ivy.jar.file}" property="ivy.present"/>
    </target>

    <target name="download-ivy" depends="check.for.ivy.jar" unless="ivy.present">
        <mkdir dir="${ivy.jar.dir}"/>
        <!-- download Ivy from web site so that it can be used even without any special installation -->
        <get src="https://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
             dest="${ivy.jar.file}" usetimestamp="true"/>
    </target>

    <target name="init-ivy" depends="download-ivy">
        <!-- try to load Ivy here from Ivy home, in case the user has not already dropped
             it into Ant's lib dir (note that the latter copy will always take precedence).
             We will not fail as long as local lib dir exists (it may be empty) and
             Ivy is in at least one of Ant's lib dir or the local lib dir. -->
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml"
                 uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
        <ivy:retrieve/>

        <path id="compile.classpath">
            <fileset dir="${basedir}/lib">
                <include name="*.jar"/>
                <exclude name="junit*.jar"/>
                <exclude name="hamcrest*.jar"/>
            </fileset>
        </path>
        <path id="compile.test.classpath">
            <path refid="compile.classpath"/>
            <pathelement location="${build.classes.dir}"/>
            <pathelement location="${build.test.classes.dir}"/>
            <pathelement path="${basedir}/lib/hamcrest-core-1.3.jar:${basedir}/lib/junit-4.13.2.jar"/>
        </path>
        <path id="run.classpath">
            <path refid="compile.classpath"/>
            <pathelement location="${build.classes.dir}"/>
        </path>
        <path id="run.test.classpath">
            <path refid="compile.test.classpath"/>
            <pathelement location="${build.test.classes.dir}"/>
        </path>
    </target>

    <!--
    ====
    INIT
    ====
    -->

    <property name="impl.title" value="${ant.project.name}"/>
    <property name="product.Name" value="Sigma Natural Language Processor (${impl.title})"/>
    <property name="product.version.major" value="1"/>
    <property name="product.version.minor" value="0"/>
    <property name="product.version.patch" value="0"/>
    <property name="product.Version" value="${product.version.major}.${product.version.minor}.${product.version.patch}"/>
    <property name="spec.vendor" value="Adam Pease"/>
    <property name="nps" value="Naval Postgraduate School (NPS), Monterey, CA"/>
    <property name="cs.dept" value="Computer Science (CS) DEPT"/>
    <property name="sumo.url" value="http://www.ontologyportal.org"/>
    <property name="manifest.mf" value="MANIFEST.MF"/>
    <property name="main.class" value="com.articulate.nlp.semRewrite.Interpreter"/>
    <property name="impl.vendor.id" value="edu.nps.cs"/>

    <property name="app.name" value="sigma"/>
    <property name="web.app.name" value="${app.name}nlp"/>
    <property name="build.home" value="build"/>
    <property name="build.classes.dir" value="${build.home}/classes"/>
    <property name="build.test.classes.dir" value="${build.home}/test/classes"/>
    <property name="dist.dir" value="dist"/>
    <property name="dist.jar" value="${dist.dir}/${web.app.name}.jar"/>
    <property name="dist.javadoc.dir" value="doc"/>
    <property name="web.dir" value="web"/>
    <property name="reports.dir" value="${build.home}/test/results"/>
    <property name="programs.dir" value="${user.home}/Programs"/>
    <property name="unit.test.suite" value="com.articulate.nlp.UnitTestSuite"/>
    <property name="integration.test.suite" value="com.articulate.nlp.IntegrationTestSuite"/>
    <property name="report.html" value="file:${basedir}/${reports.dir}/html/index.html"/>

    <property environment="env"/>
    <property name="tomcat.home" value="${env.CATALINA_HOME}"/>
    <property name="dist.home" value="${tomcat.home}/webapps"/>
    <property name="dist.war" value="${dist.home}/${web.app.name}.war"/>
    <property name="deploy.home" value="${dist.home}/${web.app.name}"/>
    <property name="git.home" value="${env.ONTOLOGYPORTAL_GIT}"/>
    <property name="sigmakee.home" value="${env.SIGMA_SRC}" />

    <property name="javac.release" value="11"/>
    <property name="run.jvmargs" value="-Xmx10g -Xss1m"/>
    <property name="corenlp.version" value="4.5.7"/>

    <condition property="isUnixNotMac">
        <and>
            <os family="unix"/>

            <not>
                <os family="mac"/>
            </not>
        </and>
    </condition>

    <path id="sourcepath">
        <dirset dir="${basedir}">
            <include name="src/main/java"/>
        </dirset>
    </path>
    <path id="test.sourcepath">
        <dirset dir="${basedir}">
            <include name="src/test"/>
        </dirset>
    </path>

    <target name="init" depends="init-ivy">
        <condition property="jdk21+">
            <javaversion atleast="21"/>
        </condition>
        <fail message="Unsupported JDK version: ${ant.java.version}. Please use a Java Development Kit (JDK) version 21 or greater."
              unless="jdk21+">
        </fail>
        <condition property="nojdk">
            <contains string="${java.home}" substring="jdk"/>
        </condition>
        <fail message="Please install a Java Development Kit (JDK) version 21 or greater."
              unless="nojdk">
        </fail>

        <echo message="Welcome to the ${product.Name} v${product.Version}"/>
        <echo message="Specification Vendor:    ${spec.vendor}"/>
        <echo message=""/>
        <echo message="CATALINA_HOME is set to: ${tomcat.home}"/>
        <echo message="CORPORA is set to:       ${env.CORPORA}"/>
        <echo message="SIGMA_HOME is set to:    ${env.SIGMA_HOME}"/>
        <echo message="SIGMA_SRC is set to:     ${sigmakee.home}"/>

        <tstamp>
            <format property="TODAY_US" pattern="EEE, d MMM yyyy HHmm Z" locale="en,US"/>
        </tstamp>
    </target>

    <!--
    ============
    BUILD / DIST
    ============
    -->

    <target name="build.sigmakee" depends="init">
        <ant antfile="../sigmakee/build.xml" inheritAll="false" target="all" />
        <copy todir="${basedir}/lib" file="../sigmakee/build/sigmakee.jar" />
        <copy todir="${basedir}/lib" file="../SigmaUtils/sigmaUtils.jar" />
    </target>

    <target name="compile" depends="build.sigmakee" description="Compile sigmanlp">
        <mkdir dir="${build.classes.dir}"/>
        <javac destdir="${build.classes.dir}"
               debug="on"
               optimize="on"
               deprecation="on"
               classpathref="compile.classpath"
               release="${javac.release}"
               includeantruntime="false"
               fork="true">
            <src refid="sourcepath"/>
        </javac>

    </target>

    <target name="compile.test" depends="compile" description="Compile the project's test classes.">
        <mkdir dir="${build.test.classes.dir}"/>
        <javac destdir="${build.test.classes.dir}"
               debug="on"
               optimize="on"
               deprecation="on"
               includeantruntime="false"
               classpathref="compile.test.classpath"
               release="${javac.release}">
            <src refid="test.sourcepath"/>
        </javac>
        <mkdir dir="${build.test.classes.dir}/resources"/>
        <copy todir="${build.test.classes.dir}/resources">
            <fileset dir="src/test/integration/java/resources">
                <include name="interpreter_wsd_batch.json"/>
            </fileset>
        </copy>
        <mkdir dir="${reports.dir}"/>
    </target>

    <target name="dist" depends="compile.test" description="Create the *.war file and place in $CATALINA_HOME/webapps.">
        <manifest file="${manifest.mf}">
            <attribute name="Built-By" value="${user.name}"/>
            <attribute name="Specification-Title"
                       value="${product.Name}"/>
            <attribute name="Specification-Version"
                       value="${product.version.major}.${product.version.minor}"/>
            <attribute name="Specification-Vendor"
                       value="${spec.vendor}"/>
            <attribute name="Implementation-Title"
                       value="${impl.title}"/>
            <attribute name="Implementation-Version"
                       value="${product.Version} built on ${TODAY_US}"/>
            <attribute name="Implementation-Vendor"
                       value="${nps}, ${cs.dept}"/>
            <attribute name="Implementation-URL"
                       value="${sumo.url}"/>
            <attribute name="Implementation-Vendor-Id"
                       value="${impl.vendor.id}"/>
            <attribute name="Main-Class"
                       value="${main.class}"/>
        </manifest>
        <war destfile="${dist.war}"
             webxml="${web.dir}/web.xml"
             manifest="${manifest.mf}">
          <metainf file="LICENSE"/>
          <metainf file="${web.dir}/context.xml"/>
          <zipfileset dir="${web.dir}/jsp"/>
          <zipfileset dir="${web.dir}/brat"/>
          <zipfileset dir="${web.dir}/js"/>
          <zipfileset dir="${web.dir}/pixmaps" prefix="pixmaps"/>
          <lib dir="${basedir}/lib">
              <exclude name="junit*"/>
              <exclude name="hamcrest*"/>
              <exclude name="tomcat-servlet-api*"/>
          </lib>
          <classes dir="${build.classes.dir}"/>
        </war>
        <jar destfile="${build.home}/${web.app.name}.jar"
             basedir="${build.classes.dir}"
             manifest="${manifest.mf}">
            <metainf file="LICENSE"/>
        </jar>
    </target>

    <!--
    =====
    ADMIN
    =====
    -->

    <target name="update.sigmanlp">
        <git command="pull" dir="${user.dir}">
            <args>
                <arg value="--progress"/>
                <arg value="--verbose"/>
            </args>
        </git>
    </target>

    <!-- git macro utils setup from: https://tonyyan.wordpress.com/2017/03/10/integrate-git-into-ant-targets/-->
    <macrodef name="git">
        <attribute name="command"/>
        <attribute name="dir" default="${git.home}"/>
        <element name="args" optional="true"/>
        <sequential>
            <echo message="git @{command}"/>
            <exec executable="git" dir="@{dir}">
                <arg value="@{command}"/>
                <args/>
            </exec>
        </sequential>
    </macrodef>

    <!-- Works only from the CLI -->
    <target name="clean" description="Delete old build, lib, dist and deployed web aritifacts">
        <delete includeemptydirs="true" failonerror="false">
            <fileset dir="${build.home}"/> <!-- avoid problems with package name changes by deleting everything -->
            <fileset dir="${dist.dir}"/>
            <!-- Delete the old web code -->
            <fileset dir="${deploy.home}"/>
            <fileset dir="${tomcat.home}/work/Catalina/localhost/${web.app.name}"/>
            <!-- Prune out of date dependencies -->
            <fileset dir="${basedir}/lib">   <!-- keep ./lib -->
                <include name="*.jar"/>
            </fileset>
        </delete>
        <delete file="${dist.war}"/>
    </target>

    <target name="all" depends="clean,dist" description="build all">
        <echo>System date/time is ${TODAY_US}</echo>
    </target>

    <target name="api_doc" depends="init" description="Build the JavaDocs and place in ${dist.javadoc.dir}.">
        <javadoc sourcepath="src/java" destdir="${dist.javadoc.dir}" author="true" version="true" use="true"
                 windowtitle="Sigma API Specification" splitindex="true" packagenames="com.articulate.nlp.*">
            <classpath refed="compile.classpath"/>
            <doctitle>SigmaNLP API Specification</doctitle>
            <header><![CDATA[<b>SigmaNLP API Specification</b>]]></header>
            <group title="Sigma" packages="com.articulate.nlp.*"/>
        </javadoc>
    </target>

    <!--
    ==========
    UNIT TESTS
    ==========
    -->

    <target name="test.unit" depends="compile.test" description="Runs the UnitTestSuite">
        <junit printsummary="yes"
               showoutput="yes"
               fork="yes">
            <jvmarg line="${run.jvmargs}"/>
            <formatter type="plain" usefile="false"/>
            <classpath>
                <path refid="run.test.classpath"/>
            </classpath>
            <test name="${unit.test.suite}" haltonfailure="no" todir="${reports.dir}">
                <formatter type="xml"/>
            </test>
        </junit>
        <antcall target="junit.report"/>
    </target>
    <target name="test.integration" depends="compile.test" description="Runs the IntegrationTestSuite">
        <junit printsummary="yes"
               showoutput="yes"
               fork="yes">
            <jvmarg line="${run.jvmargs}"/>
            <formatter type="plain" usefile="false"/>
            <classpath>
                <path refid="run.test.classpath"/>
            </classpath>
            <test name="${integration.test.suite}" haltonfailure="no" todir="${reports.dir}">
                <formatter type="xml"/>
            </test>
        </junit>
        <antcall target="junit.report"/>
    </target>
    <target name="junit.report" >
        <junitreport todir="${reports.dir}">
            <fileset dir="${reports.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${reports.dir}/html"/>
        </junitreport>
        <antcall target="open.junit.report"/>
    </target>
    <target name="open.junit.report" depends="report.mac,report.unix"/>
    <target name="report.mac">
        <exec executable="sh" osfamily="mac">
            <arg value="-c"/>
            <arg value="open -u ${report.html}"/>
        </exec>
    </target>
    <target name="report.unix" if="isUnixNotMac">
        <exec executable="sh" osfamily="unix">
            <arg value="xdg-open ${report.html}"/>
        </exec>
    </target>

</project>
